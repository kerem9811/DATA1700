DROP TABLE IF EXISTS films;
CREATE TABLE films
(
    film_id INT PRIMARY KEY AUTO_INCREMENT,
    title   VARCHAR(255) NOT NULL UNIQUE
);
DROP TABLE IF EXISTS ticket;

async function displayErrorMessages(form) {
    const invalidFields = $(form).find(":invalid");
    invalidFields.each(function () {
        const errorMessage = $(this).prop('validationMessage');
        $(this).siblings('.error-message').text(errorMessage);
    });
}


    <!--<table>
        <tr>
            <td> &lt;!&ndash; https://www.glyphicons.com/ &ndash;&gt;
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-user"></i></span>
            </td>
            <td>
                <input class="skjema" id="fornavn" name="fornavn" placeholder="Fornavn"
                       required
                       title="Skriv inn fornavn" type="text"/>
            </td>
            <td>
                <label class="feilmelding" for="fornavn" id="fornavnfeilmelding"></label>
            </td>
        </tr>
        <tr>
            <td>
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-user"></i></span>
            </td>
            <td>
                <input class="skjema" id="etternavn" name="etternavn" placeholder="Etternavn"
                       required
                       title="Skriv inn etternavn" type="text"/>
            </td>
            <td>
                <label class="feilmelding" for="etternavn" id="etternavnfeilmelding"></label>
            </td>
        </tr>
        <tr>
            <td>
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-phone"></i></span>
            </td>
            <td>
                <input class="skjema" id="tlf" name="tlf"
                       pattern="[2-7,9]\d{7}|(?:\+|00)\d{6,}" placeholder="Telefonnummer"
                       required title="Skriv et telefonnummer" type="tel"/>
            </td>
            <td>
                <label class="feilmelding" for="tlf" id="tlffeilmelding"></label>
            </td>
        </tr>
        <tr>
            <td>
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-envelope"></i></span>
            </td>
            <td>
                <input class="skjema,form-control" id="epost" name="epost" placeholder="E-post" required
                       title="Skriv inn epost" type="email"/>
            </td>
            <td>
                <label class="feilmelding" for="epost" id="epostfeilmelding"></label>
            </td>
        </tr>
    </table>-->

// Begynner med å lage et array til billettene
let tickets = [];
// Lager så et tomt billett-objekt som mellomlagring
let oldTicket = {};

// Forskjellig regex-formatering avhengig av input ----------------------------------------------------

// Sjekking av regex
const regEx = {
    // Det må velges en film
    film: /[^ ]/,
    // Antall må være 1-99
    amount: /^[1-9][0-9]?$/,
    // Kan ikke stå tom, har også required tag i html. (https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/)
    name: /^(?!\s*$).+/i,
    // Aksepterer nummer med 8 siffer som begynner med 2-7 eller 9, eller et internasjonalt nummer med minimum 6 siffer. (https://nkom.no/telefoni-og-telefonnummer/telefonnummer-og-den-norske-nummerplan/alle-nummerserier-for-norske-telefonnumre)
    tel: /^(?:[2-7,9]\d{7}|(?:\+|00)\d{6,})$/,
    // Aksepterer "normale" epost-adresser (https://www.regular-expressions.info/email.html)
    email: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
}

// Forskjellige feilmeldinger basert på input
const errorMessage = {
    film: "Du må velge en film.",
    amount: "Du må velge antall mellom 1-99",
    name: "Du må skrive inn et navn.",
    tel: "Du må skrive inn et gyldig norsk telefonnummer.",
    email: "Du må skrive inn en gyldig epost-adresse."
}


// Funksjon som sjekker film-input
function checkFilm() {
    let inputOK = regEx.film.test($("#film").val());
    if (!inputOK) {
        $("#filmfeilmelding").html(errorMessage.film);
    } else {
        $("#filmfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker antall-input
function checkAmount() {
    let inputOK = regEx.amount.test($("#antall").val());
    if (!inputOK) {
        $("#antallfeilmelding").html(errorMessage.amount);
    } else {
        $("#antallfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker fornavn-input
function checkFirstname() {
    let inputOK = regEx.name.test($("#fornavn").val());
    if (!inputOK) {
        $("#fornavnfeilmelding").html(errorMessage.name);
    } else {
        $("#fornavnfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker etternavn-input
function checkLastname() {
    let inputOK = regEx.name.test($("#etternavn").val());
    if (!inputOK) {
        $("#etternavnfeilmelding").html(errorMessage.name);
    } else {
        $("#etternavnfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker telefonnummer-input
function checkTelephone() {
    let inputOK = regEx.tel.test($("#tlf").val());
    if (!inputOK) {
        $("#tlffeilmelding").html(errorMessage.tel);
    } else {
        $("#tlffeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker epost-input
function checkEmail() {
    let inputOK = regEx.email.test($("#epost").val());
    if (!inputOK) {
        $("#epostfeilmelding").html(errorMessage.email);
    } else {
        $("#epostfeilmelding").html("");
    }
    return inputOK;
}

// Funksjonen går gjennom et array med funksjonene som skal sjekke RegEx
function checkForm() {
    let inputArray = [
        checkFilm(),
        checkAmount(),
        checkFirstname(),
        checkLastname(),
        checkTelephone(),
        checkEmail(),
    ]
    // Hvis alle verdier kommer tilbake som sanne blir checkForm-verdien også sann
    if (!inputArray.includes(false)) {
        return true;
    }
}


// En samlefunksjon som sjekker om regex-sjekk er ok, så lager ny billett med input, flytter billetten til arrayet,
// viser billett-array i konsoll-logg for debug, så printer en tabell med billettene, før den tømmer skjemadata.
// Hvis det kommer en feil i regex-sjekk vises det hvor det ble feil
function ticketPlease() {
    // if (checkForm()) {
    newTicket();
    pushTicket();
    console.log(tickets);
    showTickets();
    emptyForm();
    /* } else {
         alert("Noe ble feil, sjekk skjema");
         //     Hadde en alert ved feil
     }*/
}



    /*

    for (const ticket of tickets) {
        const row = $('<tr/>');
        table.append(row);
        for (const fieldId of fieldIds) {
            const cell = $('<td/>');
            cell.text(ticket[fieldId]);
            row.append(cell);
        }
    }*/



// Funksjon som lager en ny billett med input-data
function newTicket() {
    oldTicket = {
        film: $("#film  option:selected").text(),
        amount: $("#antall").val(),
        firstname: $("#fornavn").val(),
        lastname: $("#etternavn").val(),
        tel: $("#tlf").val(),
        email: $("#epost").val(),
    }
}



// Flytter objektet til billett-arrayet
function pushTicket() {
    tickets.push(oldTicket);
}

// Funksjon som viser info om billetter i billettarrayet
function showTickets() {
    // Begynner med å lage table head
    let ut = "<tr>" +
        "<th>Film</th><th>Antall</th><th>Navn</th><th>Etternavn</th><th>Telefonnr</th><th>Epost</th>" +
        "</tr>";
    // Så blir hver billett printet i en tabell gjennom en for-løkke
    for (let i of tickets) {
        ut += "<tr>";
        ut += "<td>" + i.film + "</td><td>" + i.amount + "</td><td>" + i.firstname + "</td><td>" + i.lastname + "</td><td>" + i.tel + "</td><td>" + i.email + "</td>";
        ut += "</tr>";
    }
    $("#liste").html(ut);
}

// Resetter skjemaet
function emptyForm() {
    $(".skjema").val("");
}


// Funksjon som sletter alle billetter (tømmer arrayet)
function deleteTicketsOld() {
    tickets.length = 0;
    $("#liste").html("");
}


function randomByWeight(values, weights) {
        // Calculate total weight
        const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);

        // Generate random number between 1 and total weight
        const randomNumber = Math.ceil(Math.random() * totalWeight);

        // Find the selected value based on weights
        let cumulativeWeight = 0;
        for (let i = 0; i < values.length; i++) {
            cumulativeWeight += weights[i];
            if (cumulativeWeight >= randomNumber) {
                return values[i];
            }
        }
    }
// Create values and weights
    const values = Array.from({ length: 99 }, (_, i) => i + 1); // Numbers 1 to 99
    const weights = values.map(value => Math.pow(100 - value, 4)); // Exponential weighting

// Get a weighted random number
    const selectedNumber = randomByWeight(values, weights);
// console.log(selectedNumber);
//     $("#antall").val(selectedNumber);


    // Lage array
    let ticketArray = [await $.get("/tickets/list")];

    // Logge array til konsoll
    for (let i = 0; i < ticketArray.length; i++) {
        console.log(ticketArray[i]);
    }
    let arrayToString = JSON.stringify(ticketArray);
    console.log(arrayToString);

    /*
    * const myArray= [4,7,2,5,6];
console.log(myArray);
const myString=myArray.toString();
console.log(myString);
    * */

    /*for (let i = 0; i < cars.length; i++) {
text += cars[i] + "<br>";
}*/
