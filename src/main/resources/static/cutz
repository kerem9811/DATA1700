 function addRowHandlers() {
            let table = document.getElementById("listeback");
            let buttonsInTable = table.getElementsByClassName("btn btn-danger");

            for (let i = 0; i < buttonsInTable.length; i++) {
                let currentRow = table.rows[i];
                let createClickHandler =
                    function (row) {
                        return function () {
                            let cell = row.getElementsByTagName("td")[0];
                            let id = cell.innerHTML;
                            alert("id:" + id);
                        };
                    };

                currentRow.onclick = createClickHandler(currentRow);
            }
        }

        window.onload = addRowHandlers();



 /*
//Delete single ticket from db
async function deleteTicketById(id) {
let ticketId = $('#id').val;
$('#ticketId').click(ticketId);
await $.post("/tickets/deleteTicketById", ticketId);
await getSortedBackend();
}
await $('#id').click(deleteTicketById($('#id').val));*/
        /*let ticketId = ticket.id;
        onclick = "deleteTicketById(ticketId)"

        async function deleteTicketById(id) {
            await $.post("/tickets/deleteTicketById", ticketId);
            await getSortedBackend();
        }*/

 /*for (const ticket of tickets) {*/
                 for (const button of buttonsInTable){
                     let currentRow = table.rows[button];
                     let createClickHandler =
                         function ()

  <!--                    <option disabled selected value="">Velg film her</option>-->
                      <!--<option value="1">2001: A Space Odyssey</option>
                      <option value="2">Apocalypse Now Redux</option>
                      <option value="3">The Godfather</option>
                      <option value="4">Blade Runner</option>
                      <option value="5">Eternal Sunshine of the Spotless Mind</option>
                      <option value="6">Manos: The Hands of Fate</option>
                      <option value="7">Minecraft: The Movie</option>
                      <option value="8">The Movie Part 2: Electric Boogaloo</option>
                      <option value="9">Steal This Film</option>-->

  async function smallTimeout() {
        console.log('starting timer');
        await new Promise(resolve => setTimeout(resolve, 200));
        console.log('after 200ms');
    }

        /*checkForm().then(async data => {
            if (data) {
                console.log("Validering av skjema er " + data);

                try {
                    await sendTicketBackend();
                    if (!sendTicketBackend) {
                        console.log("Failed sending ticket :(")
                        return alert("Error sending ticket :(")
                    } else if (sendTicketBackend) {
                        try {
                            await getSortedBackend();
                        } catch (error) {
                            console.error("Failed to fetch ticket data ", error);
                            alert("Feil med innhenting av billetter fra server :(");
                        }
                    }
                } catch (error) {
                    console.error("Failed sending ticket :( ", error);
                    alert("Failed sending ticket :( ");
                }
                void clearInputForm();

            } else {
                alert("Du må sjekke input :(");
                console.log("Validering av skjema er " + data);
            }
        })*/


import jakarta.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.RequestBody;

import java.util.ArrayList;

    // FRONTEND --------------------------------------------------------------------------------
    private final ArrayList<Ticket> tickets = new ArrayList<>();



    @PostMapping("/tickets/addfront")
    public ResponseEntity<?> addtoTicketsJavaFront(@Valid @RequestBody Ticket oneTicket) {
        try {
            tickets.add(oneTicket);
            return ResponseEntity.ok("Ticket saved in frontend");
        } catch (Exception e) {
            return ResponseEntity.badRequest().body("Error from AppController when saving frontend ticket: " + e.getMessage());
        }
    }

    @GetMapping("/tickets/listfront")
    public ArrayList<Ticket> showTicketsFront() { // Frontend tickets
        return tickets;
    }

    @PostMapping("/tickets/clearfront")
    public void deleteTicketsFront() {
        tickets.clear();
    }


/*

    @GetMapping("/tickets/listback")
    public List<Ticket> showTicketsBack() {
        try {
            System.out.println("Returned all tickets :)");
            return ticketRepository.findAll();
        } catch (Exception e) {
            System.out.println("Error returning tickets :(" + e.getMessage());
            return null;
        }
    }
*/

/*

    @GetMapping("/tickets/allSorted")
    public ResponseEntity<?> getAllTicketsSorted() {
        try {
            List<Ticket> sortedTickets = ticketRepository.findAllByOrderByLastnameAsc();
            return ResponseEntity.ok(sortedTickets); // Return a 200 OK response with the tickets
        } catch (Exception e) {
            System.out.println("Error returning tickets :(" + e.getMessage());
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body("An error occurred");
        }
    }
*/


    @GetMapping("/tickets/listback")
    public List<Ticket> showTicketsBack() {
        List<Ticket> unsortedTickets = null;
        try {
            unsortedTickets =  ticketRepository.findAll();
            System.out.println("Returned all tickets :)");
        } catch (Exception e) {
            System.out.println("Error returning tickets :(" + e.getMessage());
            return unsortedTickets;
        }
        return unsortedTickets;
    }


<!--        <p id="listebackstring"></p>-->

    <h2 id="allebilletter"><span>Alle billetter i frontend</span></h2>

    <div class="littpadding">
        <table class="tftable" id="liste"></table>
    </div>



<button class="btn btn-default" id="slettaltfront">&#10060;Slett alle billettene i frontend</button>

async function getSortedBackend() {
    // Få billetter fra server
    let backendTickets;
    try {
        backendTickets = $.getJSON("tickets/listback");
    } catch (e) {
        console.log(e)
    }
    /* let ticketsList = $.getJSON("/tickets/allSorted", function (tickets) {
         console.log('Backend tickets received:', tickets);
     }).fail(function () {
         console.error("Failed to fetch ticket data.");
         alert("Feil med innhenting av billetter fra server :(")
     });*/

    // Sortere billettene
    await clearTableBackend();
}


async function addtoTicketsBackend() {
    /*    // Lage billett-objekt med tilhørende verdier
        let ticket = {};
        ticket.film = $("#film  option:selected").text();
        ticket.amount = $("#antall").val();
        ticket.firstname = $("#fornavn").val();
        ticket.lastname = $("#etternavn").val();
        ticket.tel = $("#tlf").val();
        ticket.email = $("#epost").val();

        console.log("Backend: " + ticket);

        // Tømme skjema
        $("#orderform").trigger('reset');*/

    /*
        // Send billett to backend
        try {
            $.post("/tickets/addback", ticket, function (data) {
                console.log(data);
            });
        } catch (e) {
            console.error("Error saving ticket to backend:" + e);
        }
    */

    // Legg billett til tabell
    await updateTicketsBack();
}

async function updateTicketsBack() {
    // Få billetter fra backend
    /* let ticketstring = await $.get("/tickets/listback");
     // $("#listeback").html() = await $.get("/tickets/listback");
     /!*let tickets = "";
     $.get("/tickets/listback", function(data){
         tickets = JSON.stringify(data);*!/
     console.log("Get backend tickets " + ticketstring);
     $("#listebackstring").html = JSON.stringify(ticketstring);
     console.log($("#listebackstring").html);*/

    /* // let tickets = {};
     let tickets = $.get("/tickets/listback");


     // Tømme tabell-body
     const table = $('#listeback');
     table.empty();

     // Sende billetter til tabell
     let ut = null;
     // let nr = 1;
     ut += "<tr>" +
         "<th>Nr</th><th>Film</th><th>Antall</th><th>Fornavn</th><th>Etternavn</th><th>Telefonnr</th><th>Epost</th>" +
         "</tr>";
     // Så blir hver billett printet i en tabell gjennom en for-løkke
     for (let i in tickets) {
         ut += "<tr>";
         ut += "<td>" + i.id + "<td>" + i.film + "</td><td>" + i.amount + "</td><td>" + i.firstname + "</td><td>" + i.lastname + "</td><td>" + i.tel + "</td><td>" + i.email + "</td>";
         ut += "</tr>";
         // nr++;
     }
     $("#listeback").html(ut);
     table.html(ut);
     console.log("String av array " + tickets.toString());
     console.log("Verdien av table " + table);
     console.log("Tabell: " + ut);*/
}


// FRONTEND ---------------------------------------------------------------------
async function addtoTicketsAndTableFrontend() {
    // Sende billetter til liste
    await sendTicketsFrontend();
    // Tømme skjema
    // await clearInputForm();
    // Tømme tabell-body
    await emptyTableFrontend();
    // Legg billett til tabell
    await updateTicketsFrontend();
}

// Tømme tabell-body
async function emptyTableFrontend() {
    const table = $('#liste');
    table.empty();
}

async function sendTicketsFrontend() {
    // Lage billett-objekt med tilhørende verdier
    let ticket = await createTicketObject();
    /*
    // Send billett til frontend with fetch
     const responseFront = await fetch("/tickets/addfront", {
         method: "POST",
         headers: {"Content-Type": "application/json"},
         body: JSON.stringify(ticket),
     });
     if (!responseFront.ok) {
         console.error("Error saving ticket to frontend:", responseFront.statusText);
         alert("Error saving ticket to frontend. Please check your input.");
     }
     */

    try {
        // Sende billett til liste
        $.post("/tickets/addfront", ticket, function (data) {
            console.log("Frontend data er " + data);
            console.log("Frontend ticket er " + ticket);
        });
    } catch (e) {
        console.error("Error saving ticket to frontend:" + e);
    }

}

async function updateTicketsFrontend() {
    // Få billetter fra frontend
    let tickets = await $.get("/tickets/listfront");
    console.log("Update frontend tickets " + JSON.stringify(tickets));

    // Sende billetter til tabell, hver billett blir printet i en tabell gjennom en for-løkke
    let ut = null;
    let nr = 1;
    ut += "<tr>";
    ut += "<tr>" +
        "<th>Nr</th><th>Film</th><th>Antall</th><th>Fornavn</th><th>Etternavn</th><th>Telefonnr</th><th>Epost</th>" +
        "</tr>";
    for (let i of tickets) {
        ut += "<td>" + nr + "<td>" + i.film + "</td><td>" + i.amount + "</td><td>" + i.firstname + "</td><td>" + i.lastname + "</td><td>" + i.tel + "</td><td>" + i.email + "</td>";
        ut += "</tr>";
        nr++;
    }
    $("#liste").html(ut);
    console.log(ut);
}

async function clearTicketsFront() {
    await $.post("/tickets/clearfront");
    await updateTicketsFrontend();
}



// void addtoTicketsBackend();

                // sendTicketBackend().then(buildTable);
                // buildTable();


// let ticket = createTicketObject();
                // createTicketObject().then(clearInputForm);
                // console.log("Ticket object: " + ticket);


// await sendTicketBackend();

                /*
                getSortedBackend().then(sorted => {
                    if (sorted) {
                        console.log("Sorted list received: " + sorted);
                    } else {
                        console.log("Fail retrieving sorted list :( ")
                    }
                });
                */


    /*const responseBack = await fetch("/tickets/addback", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify(ticket),
    });

    if (!responseBack.ok) {
        console.error("Error saving ticket to backend:", responseBack.statusText);
        alert("Error saving ticket to backend. Please check your input.");
        return;
    }*/


  /*@PostMapping("tickets/addback")
    public String addBackJava(Ticket oneTicket) {
        try {
            ticketRepository.saveTicket(oneTicket);
            System.out.println(oneTicket);
            return "Ticket saved in backend :)";
        } catch (Exception e) {
            System.out.println(e.getMessage());
            return "Error saving ticket in backend :(" + e.getMessage();
        }
    }*/
/*
    @GetMapping("/tickets/listback")
    public List<Ticket> showTicketsBack() {
        try {
            ticketRepository.getAllTickets();
            System.out.println("Returned all tickets :)");
        } catch (Exception e) {
            System.out.println("Error returning tickets :(" + e.getMessage());
            return null;
        }
        return ticketRepository.getAllTickets();
    }

    @PostMapping("/tickets/clearback")
    public void deleteTickets() {
        ticketRepository.deleteTickets();
    }*/
    /* public List<Ticket> getAllTickets() {
        String sql = "SELECT * FROM tickets";
        List<Ticket> allTickets = database.query(sql, new BeanPropertyRowMapper(Ticket.class));
        return allTickets;
    }*/


    /*@PostMapping("/tickets/addback")
    public String addtoTicketsJavaBack(Ticket oneTicket) {
        try {
            ticketRepository.save(oneTicket);
            return "Ticket saved in db";
        } catch (Exception e) {
            return "Error saving ticket in db: " + e.getMessage();
        }
    }

    @GetMapping("/tickets/listback")
    public String showTicketsBack() {
        String ticket;
        ticket = ticketRepository.findAll().toString();
        return ticket; // Use the repository to get all tickets
    }
    @GetMapping("/tickets/listback")
    public List<Ticket> showTicketsBack() { // Changed return type to List
        return ticketRepository.findAll(); // Use the repository to get all tickets
    }
     @PostMapping("tickets/listback")
     public String ticketBackend(Ticket ticket){
         ticketRepository.
     }

    @PostMapping("/tickets/clearback")
    public void deleteTicketsBack() {
        ticketRepository.deleteAll();
    }*/

DROP TABLE IF EXISTS films;
CREATE TABLE films
(
    film_id INT PRIMARY KEY AUTO_INCREMENT,
    title   VARCHAR(255) NOT NULL UNIQUE
);
DROP TABLE IF EXISTS ticket;

async function displayErrorMessages(form) {
    const invalidFields = $(form).find(":invalid");
    invalidFields.each(function () {
        const errorMessage = $(this).prop('validationMessage');
        $(this).siblings('.error-message').text(errorMessage);
    });
}


    <!--<table>
        <tr>
            <td> &lt;!&ndash; https://www.glyphicons.com/ &ndash;&gt;
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-user"></i></span>
            </td>
            <td>
                <input class="skjema" id="fornavn" name="fornavn" placeholder="Fornavn"
                       required
                       title="Skriv inn fornavn" type="text"/>
            </td>
            <td>
                <label class="feilmelding" for="fornavn" id="fornavnfeilmelding"></label>
            </td>
        </tr>
        <tr>
            <td>
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-user"></i></span>
            </td>
            <td>
                <input class="skjema" id="etternavn" name="etternavn" placeholder="Etternavn"
                       required
                       title="Skriv inn etternavn" type="text"/>
            </td>
            <td>
                <label class="feilmelding" for="etternavn" id="etternavnfeilmelding"></label>
            </td>
        </tr>
        <tr>
            <td>
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-phone"></i></span>
            </td>
            <td>
                <input class="skjema" id="tlf" name="tlf"
                       pattern="[2-7,9]\d{7}|(?:\+|00)\d{6,}" placeholder="Telefonnummer"
                       required title="Skriv et telefonnummer" type="tel"/>
            </td>
            <td>
                <label class="feilmelding" for="tlf" id="tlffeilmelding"></label>
            </td>
        </tr>
        <tr>
            <td>
                <span class="input-group-addon,icon"><i class="glyphicon glyphicon-envelope"></i></span>
            </td>
            <td>
                <input class="skjema,form-control" id="epost" name="epost" placeholder="E-post" required
                       title="Skriv inn epost" type="email"/>
            </td>
            <td>
                <label class="feilmelding" for="epost" id="epostfeilmelding"></label>
            </td>
        </tr>
    </table>-->

// Begynner med å lage et array til billettene
let tickets = [];
// Lager så et tomt billett-objekt som mellomlagring
let oldTicket = {};

// Forskjellig regex-formatering avhengig av input ----------------------------------------------------

// Sjekking av regex
const regEx = {
    // Det må velges en film
    film: /[^ ]/,
    // Antall må være 1-99
    amount: /^[1-9][0-9]?$/,
    // Kan ikke stå tom, har også required tag i html. (https://www.kalzumeus.com/2010/06/17/falsehoods-programmers-believe-about-names/)
    name: /^(?!\s*$).+/i,
    // Aksepterer nummer med 8 siffer som begynner med 2-7 eller 9, eller et internasjonalt nummer med minimum 6 siffer. (https://nkom.no/telefoni-og-telefonnummer/telefonnummer-og-den-norske-nummerplan/alle-nummerserier-for-norske-telefonnumre)
    tel: /^(?:[2-7,9]\d{7}|(?:\+|00)\d{6,})$/,
    // Aksepterer "normale" epost-adresser (https://www.regular-expressions.info/email.html)
    email: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
}

// Forskjellige feilmeldinger basert på input
const errorMessage = {
    film: "Du må velge en film.",
    amount: "Du må velge antall mellom 1-99",
    name: "Du må skrive inn et navn.",
    tel: "Du må skrive inn et gyldig norsk telefonnummer.",
    email: "Du må skrive inn en gyldig epost-adresse."
}


// Funksjon som sjekker film-input
function checkFilm() {
    let inputOK = regEx.film.test($("#film").val());
    if (!inputOK) {
        $("#filmfeilmelding").html(errorMessage.film);
    } else {
        $("#filmfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker antall-input
function checkAmount() {
    let inputOK = regEx.amount.test($("#antall").val());
    if (!inputOK) {
        $("#antallfeilmelding").html(errorMessage.amount);
    } else {
        $("#antallfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker fornavn-input
function checkFirstname() {
    let inputOK = regEx.name.test($("#fornavn").val());
    if (!inputOK) {
        $("#fornavnfeilmelding").html(errorMessage.name);
    } else {
        $("#fornavnfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker etternavn-input
function checkLastname() {
    let inputOK = regEx.name.test($("#etternavn").val());
    if (!inputOK) {
        $("#etternavnfeilmelding").html(errorMessage.name);
    } else {
        $("#etternavnfeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker telefonnummer-input
function checkTelephone() {
    let inputOK = regEx.tel.test($("#tlf").val());
    if (!inputOK) {
        $("#tlffeilmelding").html(errorMessage.tel);
    } else {
        $("#tlffeilmelding").html("");
    }
    return inputOK;
}

// Funksjon som sjekker epost-input
function checkEmail() {
    let inputOK = regEx.email.test($("#epost").val());
    if (!inputOK) {
        $("#epostfeilmelding").html(errorMessage.email);
    } else {
        $("#epostfeilmelding").html("");
    }
    return inputOK;
}

// Funksjonen går gjennom et array med funksjonene som skal sjekke RegEx
function checkForm() {
    let inputArray = [
        checkFilm(),
        checkAmount(),
        checkFirstname(),
        checkLastname(),
        checkTelephone(),
        checkEmail(),
    ]
    // Hvis alle verdier kommer tilbake som sanne blir checkForm-verdien også sann
    if (!inputArray.includes(false)) {
        return true;
    }
}


// En samlefunksjon som sjekker om regex-sjekk er ok, så lager ny billett med input, flytter billetten til arrayet,
// viser billett-array i konsoll-logg for debug, så printer en tabell med billettene, før den tømmer skjemadata.
// Hvis det kommer en feil i regex-sjekk vises det hvor det ble feil
function ticketPlease() {
    // if (checkForm()) {
    newTicket();
    pushTicket();
    console.log(tickets);
    showTickets();
    emptyForm();
    /* } else {
         alert("Noe ble feil, sjekk skjema");
         //     Hadde en alert ved feil
     }*/
}



    /*

    for (const ticket of tickets) {
        const row = $('<tr/>');
        table.append(row);
        for (const fieldId of fieldIds) {
            const cell = $('<td/>');
            cell.text(ticket[fieldId]);
            row.append(cell);
        }
    }*/



// Funksjon som lager en ny billett med input-data
function newTicket() {
    oldTicket = {
        film: $("#film  option:selected").text(),
        amount: $("#antall").val(),
        firstname: $("#fornavn").val(),
        lastname: $("#etternavn").val(),
        tel: $("#tlf").val(),
        email: $("#epost").val(),
    }
}



// Flytter objektet til billett-arrayet
function pushTicket() {
    tickets.push(oldTicket);
}

// Funksjon som viser info om billetter i billettarrayet
function showTickets() {
    // Begynner med å lage table head
    let ut = "<tr>" +
        "<th>Film</th><th>Antall</th><th>Navn</th><th>Etternavn</th><th>Telefonnr</th><th>Epost</th>" +
        "</tr>";
    // Så blir hver billett printet i en tabell gjennom en for-løkke
    for (let i of tickets) {
        ut += "<tr>";
        ut += "<td>" + i.film + "</td><td>" + i.amount + "</td><td>" + i.firstname + "</td><td>" + i.lastname + "</td><td>" + i.tel + "</td><td>" + i.email + "</td>";
        ut += "</tr>";
    }
    $("#liste").html(ut);
}

// Resetter skjemaet
function emptyForm() {
    $(".skjema").val("");
}


// Funksjon som sletter alle billetter (tømmer arrayet)
function deleteTicketsOld() {
    tickets.length = 0;
    $("#liste").html("");
}


function randomByWeight(values, weights) {
        // Calculate total weight
        const totalWeight = weights.reduce((sum, weight) => sum + weight, 0);

        // Generate random number between 1 and total weight
        const randomNumber = Math.ceil(Math.random() * totalWeight);

        // Find the selected value based on weights
        let cumulativeWeight = 0;
        for (let i = 0; i < values.length; i++) {
            cumulativeWeight += weights[i];
            if (cumulativeWeight >= randomNumber) {
                return values[i];
            }
        }
    }
// Create values and weights
    const values = Array.from({ length: 99 }, (_, i) => i + 1); // Numbers 1 to 99
    const weights = values.map(value => Math.pow(100 - value, 4)); // Exponential weighting

// Get a weighted random number
    const selectedNumber = randomByWeight(values, weights);
// console.log(selectedNumber);
//     $("#antall").val(selectedNumber);


    // Lage array
    let ticketArray = [await $.get("/tickets/list")];

    // Logge array til konsoll
    for (let i = 0; i < ticketArray.length; i++) {
        console.log(ticketArray[i]);
    }
    let arrayToString = JSON.stringify(ticketArray);
    console.log(arrayToString);

    /*
    * const myArray= [4,7,2,5,6];
console.log(myArray);
const myString=myArray.toString();
console.log(myString);
    * */

    /*for (let i = 0; i < cars.length; i++) {
text += cars[i] + "<br>";
}*/
